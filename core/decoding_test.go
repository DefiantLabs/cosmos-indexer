package core

import (
	"context"
	txv1beta1 "cosmossdk.io/api/cosmos/tx/v1beta1"
	"encoding/base64"
	//celblob "github.com/celestiaorg/go-square/blob"
	"github.com/cosmos/cosmos-sdk/codec"
	cosmosTx "github.com/cosmos/cosmos-sdk/types/tx"
	"github.com/nodersteam/cosmos-indexer/config"
	"github.com/nodersteam/cosmos-indexer/probe"
	"github.com/stretchr/testify/require"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/protobuf/proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	"testing"
)

func TestInAppTxDecoder2(t *testing.T) {
	txs := []string{
		`CsYBCsMBCikvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlchKVAQoIdHJhbnNmZXISCWNoYW5uZWwtOBoRCgR1dGlhEgkyMDA1Mzc1MDAiL2NlbGVzdGlhMTQ0NDh2anFxcTc0azkzN3ZocDNnOHE1cmxnNTgyNmxwNmpodGtjKi5uZXV0cm9uMTQ0NDh2anFxcTc0azkzN3ZocDNnOHE1cmxnNTgyNmxwMDgwZWtqMgA4wL3z06uOvOYXEmYKUApGCh8vY29zbW9zLmNyeXB0by5zZWNwMjU2azEuUHViS2V5EiMKIQMdo1rsn4DYhj3V5+L7v3192h2E1jBOknlndILT9UrL2RIECgIIfxgBEhIKDAoEdXRpYRIEMjM2ORCUnQcaQGKYTRQxSnJugIhsMSzLF76Oo+whVNqhgLDJ6fsy0I8vacAdSWPKHdU4831Z/SM0/6IH3Kwga8yltXTfrCrOEMg=`,
		`Cs4CCqQBCjcvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkEmkKL2NlbGVzdGlhMWtsbTZzMnR3bWZ3d3ZqbTBuNnM4emU1dHZhMnV4c2d6d3F2cmdhEjZjZWxlc3RpYXZhbG9wZXIxcjRrcXR5ZTRkemFjbXJ3bmg2ZjA1N3A1MHBkam04ZzU5dGxoaGcKpAEKNy9jb3Ntb3MuZGlzdHJpYnV0aW9uLnYxYmV0YTEuTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmQSaQovY2VsZXN0aWExa2xtNnMydHdtZnd3dmptMG42czh6ZTV0dmEydXhzZ3p3cXZyZ2ESNmNlbGVzdGlhdmFsb3BlcjF4cWM3dzNwZTM4a2c0dHN3anQ3bW52a3M3Z3k0cDM4dnRzdXljahJmClAKRgofL2Nvc21vcy5jcnlwdG8uc2VjcDI1NmsxLlB1YktleRIjCiECqWU1FahBSsxPddYdU5+BQlh6/8Ct5PuGSlIX4i+dhnISBAoCCH8YJRISCgwKBHV0aWESBDUyNDMQ2f8PGkA1aqTMO6yH6F0VIvo9RbB6DgI2xUkMZbD55ggmi5qpHBRQe3WGXAlidLMuiNe5wM82ynIwwmvkCac4kdtUxS6F`,
		`CsEBCr4BCikvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlchKQAQoIdHJhbnNmZXISCWNoYW5uZWwtOBoMCgR1dGlhEgQyMDAwIi9jZWxlc3RpYTE3cjMyN2UyOGFlcnd0ZmFjZWRhMmFsMDZ5NWc0eWd2bnQ5dXB4cCoubmV1dHJvbjE3cjMyN2UyOGFlcnd0ZmFjZWRhMmFsMDZ5NWc0eWd2bjdzeW54dDIAOMCmp4fMjbzmFxJmClAKRgofL2Nvc21vcy5jcnlwdG8uc2VjcDI1NmsxLlB1YktleRIjCiEChsmF8j6y5Kjw/gMqeYjupD+l/uenE2Jr6HoDL3zfJiUSBAoCCH8YbxISCgwKBHV0aWESBDIzNjkQjZ0HGkAOCh+pnf7B6ZyFaWIKrLTuB9okLQyW8O5foxC+2waJkH01Axngll72YtxhOhF0rCMSE27pDtmzY4ZTf1IQyrjl`,
		`CsUBCsIBCikvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlchKUAQoIdHJhbnNmZXISCWNoYW5uZWwtOBoQCgR1dGlhEgg1MzgwMDAwMCIvY2VsZXN0aWExZmxxZWM2dnJka2t1Njc2NDg4Y2FsNDN0YWhrdno2aG1kajZldHcqLm5ldXRyb24xZmxxZWM2dnJka2t1Njc2NDg4Y2FsNDN0YWhrdno2aG1jOHp0dHkyADjAh9TIxY285hcSZApOCkYKHy9jb3Ntb3MuY3J5cHRvLnNlY3AyNTZrMS5QdWJLZXkSIwohA+0MqODaAeEia2IoXMok5xPdRJ+Gl9oU5IPluKR7XjElEgQKAgh/EhIKDAoEdXRpYRIEMjY0ORDAiggaQGOsC4Tv77dvV0lt0yT1eAi0yEF74ed67QLcNmXabRbhc5Tk5aK9QiQPDWRVmjq0sCvckoc7kZCpeocpBo3IxT0=`,
		`CqIBCpQBChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEnQKL2NlbGVzdGlhMWNscDd2ZnYwem1tNnNqbTJlOTJ3d2h3ZDB4YWRhaGdwOGR2MG4zEi9jZWxlc3RpYTFmZDNtY2x4cDRlMmZoMHdwYXUzZWc1NXgyZnNtN3lqeHpnMjlqMhoQCgR1dGlhEggyMzcwMDAwMBIJMTAxOTk5NzY1EmYKUApGCh8vY29zbW9zLmNyeXB0by5zZWNwMjU2azEuUHViS2V5EiMKIQMu4SxodcUt+Hpx0Kv5UkzCfKJPyoIAdkJPo6W7DkGEfRIECgIIfxgQEhIKDAoEdXRpYRIEMTkzNxC+9AUaQAems4eNcYh3kKTPcNGiD1U/pamORXLdpBAjQsHtgcAMdhhjxi0+4KSicTcTlJ/6UigCUTRYj3C0mOsQdjSrVqY=`,
		`CpkJCpYJCikvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlchLoCAoIdHJhbnNmZXISCWNoYW5uZWwtMhoOCgR1dGlhEgYxMDAwMDAiL2NlbGVzdGlhMXY5OGpyZTlscWZmeHB3dGhoZHRxOXJmMGVtZTBwZDh0ZmtjbnBrKj9vc21vMXF4eWR6YTdjdHpoOWZuN3NxNWdjZjBydW44Yzc4d2gwamo0N2Y0dDVkd2M1MzAycjJkbnFzcDRodTYyBwgBELW4sgdCxQd7Indhc20iOnsiY29udHJhY3QiOiJvc21vMXF4eWR6YTdjdHpoOWZuN3NxNWdjZjBydW44Yzc4d2gwamo0N2Y0dDVkd2M1MzAycjJkbnFzcDRodTYiLCJtc2ciOnsic3dhcF9hbmRfYWN0aW9uIjp7InVzZXJfc3dhcCI6eyJzd2FwX2V4YWN0X2Fzc2V0X2luIjp7InN3YXBfdmVudWVfbmFtZSI6Im9zbW9zaXMtcG9vbG1hbmFnZXIiLCJvcGVyYXRpb25zIjpbeyJwb29sIjoiMTI0NyIsImRlbm9tX2luIjoiaWJjL0Q3OUU3RDgzQUIzOTlCRkZGOTM0MzNFNTRGQUE0ODBDMTkxMjQ4RkM1NTY5MjRBMkE4MzUxQUUyNjM4QjM4NzciLCJkZW5vbV9vdXQiOiJpYmMvNDk4QTA3NTFDNzk4QTBEOUEzODlBQTM2OTExMjNEQURBNTdEQUE0RkUxNjVENUM3NTg5NDUwNUI4NzZCQTZFNCJ9LHsicG9vbCI6IjE1NjQiLCJkZW5vbV9pbiI6ImliYy80OThBMDc1MUM3OThBMEQ5QTM4OUFBMzY5MTEyM0RBREE1N0RBQTRGRTE2NUQ1Qzc1ODk0NTA1Qjg3NkJBNkU0IiwiZGVub21fb3V0IjoiaWJjLzEyNkRBMDkxMDRCNzFCMTY0ODgzODQyQjc2OUMwRTlFQzE0ODZDMDg4N0QyN0E5OTk5RTM5NUMyQzhGQjU2ODIifV19fSwibWluX2Fzc2V0Ijp7Im5hdGl2ZSI6eyJkZW5vbSI6ImliYy8xMjZEQTA5MTA0QjcxQjE2NDg4Mzg0MkI3NjlDMEU5RUMxNDg2QzA4ODdEMjdBOTk5OUUzOTVDMkM4RkI1NjgyIiwiYW1vdW50IjoiMTM2OTY2NiJ9fSwidGltZW91dF90aW1lc3RhbXAiOjE3MTUwMDk1OTA5OTI4NTUwODYsInBvc3Rfc3dhcF9hY3Rpb24iOnsiaWJjX3RyYW5zZmVyIjp7ImliY19pbmZvIjp7InNvdXJjZV9jaGFubmVsIjoiY2hhbm5lbC04NzQiLCJyZWNlaXZlciI6Im5ldXRyb24xdjk4anJlOWxxZmZ4cHd0aGhkdHE5cmYwZW1lMHBkOHR1cnFwcHUiLCJtZW1vIjoiIiwicmVjb3Zlcl9hZGRyZXNzIjoib3NtbzF2OThqcmU5bHFmZnhwd3RoaGR0cTlyZjBlbWUwcGQ4dHM4Nm5kZiJ9fX0sImFmZmlsaWF0ZXMiOltdfX19fRJmClAKRgofL2Nvc21vcy5jcnlwdG8uc2VjcDI1NmsxLlB1YktleRIjCiECWrHifilUi/OLWBhCEVKn4FODE1gOBqO3m3SDjBWEtFQSBAoCCH8YBhISCgwKBHV0aWESBDI3NTQQyrMIGkDVJxy/Izir914pQ4uFOo6urvP2z8vmQXDLLoXxAlSLI0Y9grqXz79RiuK6DIICuXxgE52N5haoMRYHrfHsH13L`,
		`CrIECq8ECikvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlchKBBAoIdHJhbnNmZXISCWNoYW5uZWwtOBoPCgR1dGlhEgcxMDAwMDAwIi9jZWxlc3RpYTF5eHlmcmF6Z3phbmE2em1ndGs2bTd6MnNzdzdxNDdzNXRqeHQ0aipCbmV1dHJvbjFjaDd4M3hncG5qNjJ3ZXllczh2ZmFkYTM1emZmNno1OWt0MnBzcWhueDlnam50MnR0cWRxdHZhM3BhMgA4wLO1+cmNvOYXQtcCeyJ3YXNtIjp7ImNvbnRyYWN0IjoibmV1dHJvbjFjaDd4M3hncG5qNjJ3ZXllczh2ZmFkYTM1emZmNno1OWt0MnBzcWhueDlnam50MnR0cWRxdHZhM3BhIiwibXNnIjp7InRyYW5zZmVyX3JlbW90ZSI6eyJkZXN0X2RvbWFpbiI6MTY5LCJyZWNpcGllbnQiOiIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjYjBlYzUwNDdkNWY3Yzc3MjZkOTBkMmQ4YjIyM2RkODMzODhmYzI5IiwiYW1vdW50IjoiNzMwMDAwIn19LCJmdW5kcyI6W3siYW1vdW50IjoiMTAwMDAwMCIsImRlbm9tIjoiaWJjLzc3M0I0RDBBM0NENjY3QjIyNzVENUE0QTdBMkYwOTA5QzBCQTBGNDA1OUMwQjkxODFFNjgwRERGNDk2NURDQzcifV19fRJmClAKRgofL2Nvc21vcy5jcnlwdG8uc2VjcDI1NmsxLlB1YktleRIjCiECDMs6SVkBJaWujnGVC7dv/tEIbTWaCPzIJP/gwOn6ZMISBAoCCH8YFhISCgwKBHV0aWESBDI0NzEQlsUHGkBVlHJW8UCPktvQ+/MmTs7gbr5cnV6Mpo6Uwwp9XAk6pxi8d8MA66ZNZ8vLQZIMk2p98bhnsgUvG9jFNJm3UzLA`,
		`CqQBCqEBCiMvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dEZWxlZ2F0ZRJ6Ci9jZWxlc3RpYTF5cGFrdWVycDJmejVyZXNuNzRjbmdhcmtuemxnajg3c2htczgwbRI2Y2VsZXN0aWF2YWxvcGVyMWpncWV3cHpuN2R3dzV0bHBua3lwbTcyZm04dGp6bm13N2xsN2xzGg8KBHV0aWESBzEyODUyNDASZgpQCkYKHy9jb3Ntb3MuY3J5cHRvLnNlY3AyNTZrMS5QdWJLZXkSIwohAyJR9zUWhwBjZk+nC4T9mY0AxtaBE8sIUsnWEPwChKPZEgQKAgh/GBgSEgoMCgR1dGlhEgQ0NDk4EPrcDRpAmcFpQJC64mtrbuGcK5/TZX/IlVal426+AMo88UgoKqRziaBkwNL8W7WtvXI5/xjkbXoqBMzQkFnvVlhQykH9AA==`,
		`CqMBCqABCiMvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dEZWxlZ2F0ZRJ5Ci9jZWxlc3RpYTE0bXkzbTBoOG4zd3B2d3k1MmQzMjg0YzRnNXVmbjZ2ZWM5YW5uehI2Y2VsZXN0aWF2YWxvcGVyMTU5M25zMDByZnRscXAyZ3l1NndkbXJxcGd2NWZydjBoc2Y0c3cyGg4KBHV0aWESBjgzMTgwNBJmClAKRgofL2Nvc21vcy5jcnlwdG8uc2VjcDI1NmsxLlB1YktleRIjCiED3NMJZplackfVG1WgkEHHK9fydblR8uuMO7+QLRKFPM8SBAoCCH8YBhISCgwKBHV0aWESBDE5NjEQvvsLGkA+GOqBG03eVkE3IiudOt0VKqM1Fr1Qoa8SAH9STKjpLEESSFpsayRuqJCEvCuf+bpKhX9Jpq733pszy6HLMchI`,
		`Cs4CCqABCp0BCiAvY2VsZXN0aWEuYmxvYi52MS5Nc2dQYXlGb3JCbG9icxJ5Ci9jZWxlc3RpYTFsZXJnN2p5bmRycTZuODl3eWF6NmNlYTV1c2UzZnY2a3ZsMDlxMhIdAAAAAAAAAAAAAAAAAAAAAAAAALz67w0250KL770aAtwoIiBQ9MCiKK7G8bS2DAu2ZusJVyXApDVe7dPuZzwQoD2iZkIBABJnClIKRgofL2Nvc21vcy5jcnlwdG8uc2VjcDI1NmsxLlB1YktleRIjCiEDavqIqXtOEPBdsVzmflglK0QpClzBu15p0739MiDxSWESBAoCCAEYz9gBEhEKCwoEdXRpYRIDNjUzEIvsCBpAr0wZjV7ThyHZonWqiw3xEFtT1O3/ooqIGQTLEI95WcImL+TGVkbebFJj/k/BXb1fbERrczhNxEfQNhSsIxea2BL9KAocAAAAAAAAAAAAAAAAAAAAAAAAvPrvDTbnQovvvRLcKAia/g0Qnv4NGvQGCqwCCgIICxIIvPrvDTbnQosYmv4NIPeQ49P6+7vmFyogCDg36zGm4dr3GMlTC3ynG/OmvQq3xPdzl362GyemjboyIFv7OHvHTUqVzH53hor728QYmxIrrOwn7nx9pnjoQfyQOiCu8NxKO9VIFHJbdiXFFzjGhWhGwNXCTFL3fULs4XxIfkIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKIC0raDQ53yTo0gLO/P0CS37lRCsZrw4she9eS/qn/9bUUiDjsMRCmPwcFJr79MiZb7kkJ65B5GSbk0yklZkbeFK4VVoUb0xORIKsER6epNRFCGmImvc4BGpiIGtSvF4U3Ow2/LiicJt9SWfVi7t40bpCo3N4Tj8XKycoagpuaW1fMTEyMi0xEu0CCuoCCqcBCqQBCiMvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dEZWxlZ2F0ZRJ9CipuaW0xZDU0NHZ3dnJ4NDBkcmNwNnMzbHAzdHU5dWY3anY2cHE5MzRlcnUSMW5pbXZhbG9wZXIxZDUwenA1bXltdDUzZGt6bjl4cnNsd2VuMmN1cDI1dXp0Y3h3NnkaHAoEYW5pbRIUMTk2ODU1MzU2NzAwMDAwMDAwMDASewpZCk8KKC9ldGhlcm1pbnQuY3J5cHRvLnYxLmV0aHNlY3AyNTZrMS5QdWJLZXkSIwohAxlu5ywJzEZSa3gpQHm6vrMvcZOmJAcuSjTo8/L3u0kEEgQKAggBGAISHgoYCgRhbmltEhAyMTk5NTQwMDAwMDAwMDAwELK2DRpBS0X9vqjYGzTW0XfAuTClgen9+aeGgG97oHVgzmexdHQhiimuiPCOpriAoeBVz71OpujdW3fjkQUsjzQaX23PxRwa0gEImf4NEiAIODfrMabh2vcYyVMLfKcb86a9CrfE93OXfrYbJ6aNuhpASCIVy2uY/Rk98HxRpWNlhxAJLYmDzySEthiGDhz64SY86OhUjyfq3mjhtNWBhh8BZtUgSGHOB0Rw2hMi+yuMASJoCAISFG9MTkSCrBEenqTURQhpiJr3OARqGgwIlO7jsQYQ16a0rgMiQPxcQTGqH2FqnXa5B7LPXYFAq7iYD0CoSo9iYV/yYUyU1EaaHTUTqPvpnXPr1jspTn0g0znSLMPqsLBtR9/vLAMa8gYKrAIKAggLEgi8+u8NNudCixib/g0gy9zIq4T8u+YXKiColGJdHLduqbvbI0I+BoHUHFdmN9ctOuT38KyQrLcRLjIgbsh4u1pDveIVAm0TX6KqO/8zZ9RQUBLx4NcGbdQf/IM6IHvAVWppCkgqlR11fOSFraV5f9T9U8MhmiK6hxUCeAvXQiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEogYXpovjZVK0h4DWfDrE/xmCMcZ3AlGpXNUJlXHHMK6ZNSIHuazAcULsfnGWLFNhOJ42aZ6LDSFcxn7FLxQZajz0SUWhRvTE5EgqwRHp6k1EUIaYia9zgEamIga1K8XhTc7Db8uKJwm31JZ9WLu3jRukKjc3hOPxcrJyhqCm5pbV8xMTIyLTES7AIK6QIKqAEKpQEKIy9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ0RlbGVnYXRlEn4KKm5pbTFzam50cHN5M2M0ZTM4Y2U0cHZ3ZjZrMjh5NXRsdnIycGtzOGd3dhIxbmltdmFsb3BlcjF1Njl6NGp4bnd0enE4MjloM3I1ZGV4bXJnY3BmdWQ2Zmpwdms1MBodCgRhbmltEhUxMjAwMDAwMDAwMDAwMDAwMDAwMDASeQpXCk8KKC9ldGhlcm1pbnQuY3J5cHRvLnYxLmV0aHNlY3AyNTZrMS5QdWJLZXkSIwohA3J7DMmpgziGRxcMYXJvFL4z+vjm91y2mLek0XGhrSjuEgQKAggBEh4KGAoEYW5pbRIQMjM5MjIyMDAwMDAwMDAwMBD2zA4aQZbYeBvHr0nxbd7EIdK8FgmonWLUfwu91wEb0LApkdDkbCPGKUMmIOMJOG9jrcQmw5za+B/p/f8pKvnS/9CUHrEbGtEBCJr+DRIgqJRiXRy3bqm72yNCPgaB1BxXZjfXLTrk9/CskKy3ES4aQLpvZRi3YaQnqUBunZdMAybEd1E6jyq0ZR3iUfsi21Wg7jRZD5BY7cIZtZWZp3q/2rpUifgKXS19eTngzyYb2QoiZwgCEhRvTE5EgqwRHp6k1EUIaYia9zgEahoLCJbu47EGEKbZnRIiQGebfUx9D+E+7SItsJ68j8WADnhDyf9W3kdUcML/WhdyU8ljHB8qRZIZX9WRltWHoGH4Ipwrju1uV63mBhdQEAwawAcKrAIKAggLEgi8+u8NNudCixic/g0gxc2g6oX8u+YXKiDYr8Rq3FxEoOoujzJ+D5ITY4Z0OYaT9uKXUnQXGqp2ZTIgJ/tEt0GdSOZN5wwciX0WM8VzFVbL/mvkHSg2XlMW4BY6IAbvYmtr4BUjWV6VClXatzqq7UFYSZnNfCHXv8l9a6w8QiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEog0dS7Z3QXWieRDuV67h3LaKhx/ybpFhcb0zlIkb78qSpSIC5QBHdBVircEuWNRzfSkN8aVkumAMbMINsRFOw25q0hWhRvTE5EgqwRHp6k1EUIaYia9zgEamIga1K8XhTc7Db8uKJwm31JZ9WLu3jRukKjc3hOPxcrJyhqCm5pbV8xMTIyLTESuQMKtgMK9QEK8gEKKS9pYmMuYXBwbGljYXRpb25zLnRyYW5zZmVyLnYxLk1zZ1RyYW5zZmVyEsQBCgh0cmFuc2ZlchIJY2hhbm5lbC0wGh0KBGFuaW0SFTEzNzIwODg5MTg4MDAwMDAxMDAwMCIqbmltMTc0eDJ2cHA3Zmd6bjlnenI3bDhyY3k2dzhwbmM0N3JydHN4NzU2KipkeW0xNzR4MnZwcDdmZ3puOWd6cjdsOHJjeTZ3OHBuYzQ3cnJkcXVsNjkyBQiPThABOIDwnJ6ujbzmF0IleyJlaWJjIjp7ImZlZSI6IjIwNTgxMzMzNzgyMDAwMDAzMCJ9fRJ5ClcKTwooL2V0aGVybWludC5jcnlwdG8udjEuZXRoc2VjcDI1NmsxLlB1YktleRIjCiEDDZG5k1ps6DGzOCfBF3aFI0sk+Hrgn+pHal1UM3TkUeYSBAoCCAESHgoYCgRhbmltEhAxMjc3MzMwMDAwMDAwMDAwEPXlBxpBApAHB5hGfEJ7un4MPHwz6InrrYJfIvcyIACL7paD4rpV148KMAJHft1Pi2baBdWzk5Nd3GfFUi2Ut3xtLAW9CBsa0gEIm/4NEiDYr8Rq3FxEoOoujzJ+D5ITY4Z0OYaT9uKXUnQXGqp2ZRpASEMXFkjbQ8HmP00iAKJ6HNLSQHFOqZ7McI+y1Lw0B+jS5wR3YNmJh8QVXCDWwjt9n70z8ne1CP2GQUIp87Z0AiJoCAISFG9MTkSCrBEenqTURQhpiJr3OARqGgwImO7jsQYQ1fassAIiQFVCMgacALxP7D2Gt1ub+sf1uMYqALgqNTGcVKN1FtSjZUv7si2Aj77gu/n4p1/dWhLRBKBwPj8cuNdo2128RAga8gYKrAIKAggLEgi8+u8NNudCixid/g0gt6ep1p38u+YXKiAzBm6kZx6nO8KfF1svIJgQCjWMt/qi7JvEi9FmoRRJHjIgicLVk+kalNKwLN5TwzvNjxGOnp7V+qxpOOZH1Pn2EdE6IPSXOrp75GdDgdlfUkcL/Eg+Livj8Gom8n+Co9mf/wsJQiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEogVDBphavXoOQQGfyAh0gpc0Hm/d3XhWvIHzO+XcwENKRSIG9NL2Od7Htakr3AdYSVv1xdjWZTfDXsphJRm/UXHk+lWhRvTE5EgqwRHp6k1EUIaYia9zgEamIga1K8XhTc7Db8uKJwm31JZ9WLu3jRukKjc3hOPxcrJyhqCm5pbV8xMTIyLTES7AIK6QIKqAEKpQEKIy9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ0RlbGVnYXRlEn4KKm5pbTE4aHBxdmw4NXZsNGc4MnpmcG05ZTIycjh5N25xNXVkMHY1NDhhdxIxbmltdmFsb3BlcjEyZmozbnhsZmc5ajh4bTd0NGN3M25zNDNoYXc5eDl0Y3hzNjMyZRodCgRhbmltEhUyMjgzMjc4MzU1OTAwMDAwMjAwMDASeQpXCk8KKC9ldGhlcm1pbnQuY3J5cHRvLnYxLmV0aHNlY3AyNTZrMS5QdWJLZXkSIwohAo2vpEXeDprNSK37DgEWDtEbELYI4Vq2oORbyO947PgTEgQKAggBEh4KGAoEYW5pbRIQMjQ5NDkxMDAwMDAwMDAwMBCTnQ8aQUpL+Ku2exFcbWsCdOwVGPWCOCZTB8VUHkgEkVHISQBBRXX/RABLYC8oNm6/OCpsz+ZJpKKsZur79XO98uhuduQcGtEBCJz+DRIgMwZupGcepzvCnxdbLyCYEAo1jLf6ouybxIvRZqEUSR4aQF+Z4AL/06nuAendCgCAyLZUqxMZla+dWxJSdmtHB3ibXtlJPgVHqh12c4GrzciCA+H4OOMQk1Ao5bBWG2CaPQ4iZwgCEhRvTE5EgqwRHp6k1EUIaYia9zgEahoLCJnu47EGEPWdmhIiQKyOVniX0Ip6gMKZSNx/5BHDM6Hs2fZpavY2tVE7TBMTxe1HrdeuSr/7eXdknrrIrku+zmTNzhMzv5Bk2HNtJg0ahgQKrAIKAggLEgi8+u8NNudCixie/g0g5umn96H8u+YXKiCYIGymMa4VUj9ngGUjQlU0vklj/4AQarkRUOKVOyIazzIg/UabLT/rVoYHcyo2NTlA1v5kAT9Sjyx4GYcPSjT17AQ6IOOwxEKY/BwUmvv0yJlvuSQnrkHkZJuTTKSVmRt4UrhVQiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEog9+Eb35g24ti+DlIEmfIz6djncj3q4ja/WH0OSXI13AxSIICdvMPuOEcl1h++WAYrKSunfs0M8GQXXSGHPnkeEC72WhRvTE5EgqwRHp6k1EUIaYia9zgEamIga1K8XhTc7Db8uKJwm31JZ9WLu3jRukKjc3hOPxcrJyhqCm5pbV8xMTIyLTESABrSAQid/g0SIJggbKYxrhVSP2eAZSNCVTS+SWP/gBBquRFQ4pU7IhrPGkBnzwHzyrWe0BFbgB6pJq2uzcPGkTwTTIQeyzPMNtaLXFxJeLP8JrgmoeHJzKCQVP5snGMVJRfTLritD96B/VYOImgIAhIUb0xORIKsER6epNRFCGmImvc4BGoaDAif7uOxBhDj4p/RASJA5+Ggp5MLKepQJPiEVE/rrN/HnkzzPnAgVRU4emWttNDyiGvKQPh0iaVmuhcDunBAzeOt9hQJ9J2Jxqgr5QXxACLRAQia/g0SIKiUYl0ct26pu9sjQj4GgdQcV2Y31y065PfwrJCstxEuGkC6b2UYt2GkJ6lAbp2XTAMmxHdROo8qtGUd4lH7IttVoO40WQ+QWO3CGbWVmad6v9q6VIn4Cl0tfXk54M8mG9kKImcIAhIUb0xORIKsER6epNRFCGmImvc4BGoaCwiW7uOxBhCm2Z0SIkBnm31MfQ/hPu0iLbCevI/FgA54Q8n/Vt5HVHDC/1oXclPJYxwfKkWSGV/VkZbVh6Bh+CKcK47tblet5gYXUBAMItIBCJv+DRIg2K/EatxcRKDqLo8yfg+SE2OGdDmGk/bil1J0FxqqdmUaQEhDFxZI20PB5j9NIgCiehzS0kBxTqmezHCPstS8NAfo0ucEd2DZiYfEFVwg1sI7fZ+9M/J3tQj9hkFCKfO2dAIiaAgCEhRvTE5EgqwRHp6k1EUIaYia9zgEahoMCJju47EGENX2rLACIkBVQjIGnAC8T+w9hrdbm/rH9bjGKgC4KjUxnFSjdRbUo2VL+7ItgI++4Lv5+Kdf3VoS0QSgcD4/HLjXaNtdvEQIItEBCJz+DRIgMwZupGcepzvCnxdbLyCYEAo1jLf6ouybxIvRZqEUSR4aQF+Z4AL/06nuAendCgCAyLZUqxMZla+dWxJSdmtHB3ibXtlJPgVHqh12c4GrzciCA+H4OOMQk1Ao5bBWG2CaPQ4iZwgCEhRvTE5EgqwRHp6k1EUIaYia9zgEahoLCJnu47EGEPWdmhIiQKyOVniX0Ip6gMKZSNx/5BHDM6Hs2fZpavY2tVE7TBMTxe1HrdeuSr/7eXdknrrIrku+zmTNzhMzv5Bk2HNtJg0i0gEInf4NEiCYIGymMa4VUj9ngGUjQlU0vklj/4AQarkRUOKVOyIazxpAZ88B88q1ntARW4AeqSatrs3DxpE8E0yEHsszzDbWi1xcSXiz/Ca4JqHhycygkFT+bJxjFSUX0y64rQ/egf1WDiJoCAISFG9MTkSCrBEenqTURQhpiJr3OARqGgwIn+7jsQYQ4+Kf0QEiQOfhoKeTCynqUCT4hFRP66zfx55M8z5wIFUVOHplrbTQ8ohrykD4dImlZroXA7pwQM3jrfYUCfSdicaoK+UF8QAi0gEInv4NEiBGdL+K45JReehaa1QGL1t8rzsy2S68Y5N6d2in1VSEZBpAYE6lLg07e9/7CHFW8YUsBMqv9Sqysq2tAeJmC8oAZdnztipyxWxuSX6uNT8E+X01X5huvv0mbCllEzNjUCH5CyJoCAISFG9MTkSCrBEenqTURQhpiJr3OARqGgwIoO7jsQYQrfmylQIiQBaloeeuZBrOp9wK7INk880dLaDr3iO+iQ9tM7S56os9uVQUqdisxItmu8Wk3a7Lta7UP10qxGH8d1r+PWJQjwIaBEJMT0I=`,
	}
	for index, decodingTx := range txs {
		data, err := base64.StdEncoding.DecodeString(decodingTx)
		require.NoError(t, err)

		cfg := config.Probe{
			RPC:           "https://celestia-rpc.publicnode.com:443",
			AccountPrefix: "celestia",
			ChainID:       "celestia",
			ChainName:     "celestia",
		}

		cl := probe.GetProbeClient(cfg)
		txBasic, err := InAppTxDecoder(cl.Codec)([]byte(data))
		require.NoError(t, err)
		txFull := txBasic.(*cosmosTx.Tx)
		require.True(t, len(txFull.Body.Messages) > 0)
		require.True(t, len(txFull.Signatures) > 0)
		require.NotNil(t, txFull.AuthInfo)
		if index != 9 {
			require.True(t, len(txFull.AuthInfo.SignerInfos) > 0)
		}
	}
}

func TestInAppTxDecoder(t *testing.T) {
	// https://celestia.explorers.guru/block/1386451

	grpcConn, err := grpc.Dial(
		"celestia-grpc.noders.services:11090",
		//grpc.WithTransportCredentials(credentials.NewTLS(&tls.Config{})),
		grpc.WithTransportCredentials(insecure.NewCredentials()),
		grpc.WithDefaultCallOptions(grpc.ForceCodec(codec.NewProtoCodec(nil).
			GRPCCodec())),
	)
	if err != nil {
		panic(err)
	}
	defer grpcConn.Close()

	cl := cosmosTx.NewServiceClient(grpcConn)
	_, err = cl.GetBlockWithTxs(context.Background(), &cosmosTx.GetBlockWithTxsRequest{
		Height: 1662382,
	})
	require.NoError(t, err)
}

func unmarshalCosmosTx(txbytes []byte) ([]*anypb.Any, error) {
	var raw txv1beta1.TxRaw
	if err := proto.Unmarshal(txbytes, &raw); err != nil {
		return nil, err
	}

	var body txv1beta1.TxBody
	if err := proto.Unmarshal(raw.BodyBytes, &body); err != nil {
		return nil, err
	}
	return body.Messages, nil
}

/*
func unmarshalCelestiaBlobTx(txbytes []byte) (*celblob.BlobTx, error) {
	blobTx, success := celblob.UnmarshalBlobTx(txbytes)
	if !success {
		return nil, errors.New("fail unmarshaling celestia blobtx")
	}
	return blobTx, nil
}
*/
